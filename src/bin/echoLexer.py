# Generated from echo.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,186,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,94,8,12,1,13,1,
        13,5,13,98,8,13,10,13,12,13,101,9,13,1,14,4,14,104,8,14,11,14,12,
        14,105,1,15,4,15,109,8,15,11,15,12,15,110,1,15,1,15,4,15,115,8,15,
        11,15,12,15,116,1,16,1,16,5,16,121,8,16,10,16,12,16,124,9,16,1,16,
        1,16,1,16,5,16,129,8,16,10,16,12,16,132,9,16,1,16,3,16,135,8,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,146,8,17,1,18,
        1,18,1,18,1,18,5,18,152,8,18,10,18,12,18,155,9,18,1,18,1,18,1,19,
        1,19,1,19,1,19,5,19,163,8,19,10,19,12,19,166,9,19,1,19,1,19,1,19,
        1,19,1,19,1,20,4,20,174,8,20,11,20,12,20,175,1,20,1,20,1,21,4,21,
        181,8,21,11,21,12,21,182,1,21,1,21,3,122,130,164,0,22,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,6,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,2,
        0,10,10,12,13,2,0,9,9,32,32,201,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,
        0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,54,1,0,0,0,11,56,1,0,
        0,0,13,58,1,0,0,0,15,61,1,0,0,0,17,64,1,0,0,0,19,66,1,0,0,0,21,68,
        1,0,0,0,23,70,1,0,0,0,25,93,1,0,0,0,27,95,1,0,0,0,29,103,1,0,0,0,
        31,108,1,0,0,0,33,134,1,0,0,0,35,145,1,0,0,0,37,147,1,0,0,0,39,158,
        1,0,0,0,41,173,1,0,0,0,43,180,1,0,0,0,45,46,5,59,0,0,46,2,1,0,0,
        0,47,48,5,42,0,0,48,4,1,0,0,0,49,50,5,47,0,0,50,6,1,0,0,0,51,52,
        5,42,0,0,52,53,5,42,0,0,53,8,1,0,0,0,54,55,5,43,0,0,55,10,1,0,0,
        0,56,57,5,45,0,0,57,12,1,0,0,0,58,59,5,60,0,0,59,60,5,60,0,0,60,
        14,1,0,0,0,61,62,5,62,0,0,62,63,5,62,0,0,63,16,1,0,0,0,64,65,5,40,
        0,0,65,18,1,0,0,0,66,67,5,41,0,0,67,20,1,0,0,0,68,69,5,58,0,0,69,
        22,1,0,0,0,70,71,5,61,0,0,71,24,1,0,0,0,72,73,5,105,0,0,73,74,5,
        110,0,0,74,94,5,116,0,0,75,76,5,102,0,0,76,77,5,108,0,0,77,78,5,
        111,0,0,78,79,5,97,0,0,79,94,5,116,0,0,80,81,5,115,0,0,81,82,5,116,
        0,0,82,83,5,114,0,0,83,84,5,105,0,0,84,85,5,110,0,0,85,94,5,103,
        0,0,86,87,5,115,0,0,87,88,5,116,0,0,88,94,5,114,0,0,89,90,5,98,0,
        0,90,91,5,111,0,0,91,92,5,111,0,0,92,94,5,108,0,0,93,72,1,0,0,0,
        93,75,1,0,0,0,93,80,1,0,0,0,93,86,1,0,0,0,93,89,1,0,0,0,94,26,1,
        0,0,0,95,99,7,0,0,0,96,98,7,1,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,
        97,1,0,0,0,99,100,1,0,0,0,100,28,1,0,0,0,101,99,1,0,0,0,102,104,
        7,2,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,
        1,0,0,0,106,30,1,0,0,0,107,109,7,2,0,0,108,107,1,0,0,0,109,110,1,
        0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,114,5,
        46,0,0,113,115,7,2,0,0,114,113,1,0,0,0,115,116,1,0,0,0,116,114,1,
        0,0,0,116,117,1,0,0,0,117,32,1,0,0,0,118,122,5,34,0,0,119,121,9,
        0,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,123,1,0,0,0,122,120,1,
        0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,135,5,34,0,0,126,130,5,
        39,0,0,127,129,9,0,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,131,1,
        0,0,0,130,128,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,135,5,
        39,0,0,134,118,1,0,0,0,134,126,1,0,0,0,135,34,1,0,0,0,136,137,5,
        116,0,0,137,138,5,114,0,0,138,139,5,117,0,0,139,146,5,101,0,0,140,
        141,5,102,0,0,141,142,5,97,0,0,142,143,5,108,0,0,143,144,5,115,0,
        0,144,146,5,101,0,0,145,136,1,0,0,0,145,140,1,0,0,0,146,36,1,0,0,
        0,147,148,5,47,0,0,148,149,5,47,0,0,149,153,1,0,0,0,150,152,8,3,
        0,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,
        0,0,154,156,1,0,0,0,155,153,1,0,0,0,156,157,6,18,0,0,157,38,1,0,
        0,0,158,159,5,47,0,0,159,160,5,42,0,0,160,164,1,0,0,0,161,163,9,
        0,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,165,1,0,0,0,164,162,1,
        0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,42,0,0,168,169,5,
        47,0,0,169,170,1,0,0,0,170,171,6,19,0,0,171,40,1,0,0,0,172,174,7,
        4,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,1,
        0,0,0,176,177,1,0,0,0,177,178,6,20,0,0,178,42,1,0,0,0,179,181,7,
        5,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,
        0,0,0,183,184,1,0,0,0,184,185,6,21,0,0,185,44,1,0,0,0,14,0,93,99,
        105,110,116,122,130,134,145,153,164,175,182,1,6,0,0
    ]

class echoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    TYPE_NAME = 13
    VAR = 14
    INT = 15
    FLOAT = 16
    STRING = 17
    BOOL = 18
    COMMENT = 19
    MULTICOMMENT = 20
    NEWLINE = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'*'", "'/'", "'**'", "'+'", "'-'", "'<<'", "'>>'", "'('", 
            "')'", "':'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_NAME", "VAR", "INT", "FLOAT", "STRING", "BOOL", "COMMENT", 
            "MULTICOMMENT", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "TYPE_NAME", 
                  "VAR", "INT", "FLOAT", "STRING", "BOOL", "COMMENT", "MULTICOMMENT", 
                  "NEWLINE", "WS" ]

    grammarFileName = "echo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


